Build an autonomous Line/Light follower robot and participated in the Abhivaykti Event held in SRMCEM, Lucknow 
Position Secured : First Position
Tools Used : Arduino UNO, Arduino IDE.
Hardware : Arduino UNO, infrared Sensors, and motor controllers.
CODE:
6#include <string.h> // stopdelay variable is added for different speed in learning and following path. . In learning path if done found, delay between learning and following path changed to 10s to 6s . stoppdelay is added in the following path as the spd is set to 110 in following path so stopdelay is increased from 100 to 140 for hard break . In following path after every turn found the delay to align the wheel with the turn for a correct turn decreased from 370 to 300 as the bot was overshooting the turns and then turning. In stop funtion now the delay is not 100 its value is stoppdelay variable value is 100 in learning path and 140 in following path. In fullstop function stopdelay is 80 as no hard breaks are required as the maze is complete and there is no problem of overshooting.
#define leftFS A0
#define leftNS A1
#define leftMS A2
#define rightMS A3
#define rightNS A4
#define rightFS A5
#define LMP 6
#define LMN 7
#define RMP 5
#define RMN 4
int stoppdelay = 100;
int ENAS;
int ENBS;
#define ENA 11
#define ENB 10
#define setpoint 4
int error = 0;
int spd = 64;
int control = 0;
//int kp=45;
//int ki=1;
//int kd=1;
int checktime = 19;
int positionn = 4;
int lfsr, lnsr, lmsr, rmsr, rnsr, rfsr;
char path[1000];
int pathcounter = 0;
int Kp = 40;
int Ki = 1;
int Kd = 50;
int P = 0, I = 0, D = 0;
int previous_error = 0, previous_I = 0;
void setup() {
  pinMode(leftFS, INPUT);
  pinMode(leftNS, INPUT);
  pinMode(leftMS, INPUT);
  pinMode(rightMS, INPUT);
  pinMode(rightNS, INPUT);
  pinMode(rightFS, INPUT);
  pinMode(LMP, OUTPUT);
  pinMode(LMN, OUTPUT);
  pinMode(RMP, OUTPUT);
  pinMode(RMN, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(12, OUTPUT);
  analogWrite(ENA, spd);
  analogWrite(ENB, spd);
  for (int i = 0; i < 1000; i++)
    path[i] = 'Z';
  delay(2000);
}
void loop()
{
  calculateposition();
  if (positionn == 1 || positionn == 2 || positionn == 3 || positionn == 4 || positionn == 5 || positionn == 6 || positionn == 7)
  {
    straight();
  }
  else
  {
    Righthandrule();
  }
  positionn = -1;
}
/*void PID()
  {
  calculateposition();
  error = setpoint - positionn;
  control = kp*error;
  Serial.print("spdl = ");
  Serial.print(spd-control);
  Serial.print("spdr = ");
  Serial.println(spd+control);

  }*/
void PID()
{
  calculateposition();
  P = error;
  I = I + previous_I;
  D = error - previous_error;
  control = (Kp * P) + (Ki * I) + (Kd * D);
  previous_I = I;
  previous_error = error;

  /*( Serial.print("p term = ");Serial.print(Kp * P);Serial.print("I term = ");Serial.print(Ki*P);Serial.print("D term = ");Serial.print(Kd*D);
    Serial.print(" Control = ");
    Serial.print(control);
    Serial.print(" ");
    printvalues();*/
}
void Righthandrule()
{
  if (lfsr == 0 && lnsr == 0 && lmsr == 1 && rmsr == 1 && rnsr == 1 && rfsr == 1)
  {
    delay(checktime);
    calculateposition();
    if (lfsr == 0 && lnsr == 0 && lmsr == 1 && rmsr == 1 && rnsr == 1 && rfsr == 1)
    {
      stopp();
      defaultstraight();
      delay(370);
      rightturn();
      path[pathcounter++] = 'R';
    }
  }
 else if (lfsr == 0 && lnsr == 0 && lmsr == 0 && rmsr == 1 && rnsr == 1 && rfsr == 1)
  {
    delay(checktime);
    calculateposition();
    if (lfsr == 0 && lnsr == 0 && lmsr == 0 && rmsr == 1 && rnsr == 1 && rfsr == 1)
    {
      stopp();
      defaultstraight();
      delay(370);
      rightturn();
      path[pathcounter++] = 'R';
    }
  }
  else if (lfsr == 1 && lnsr == 1 && lmsr == 1 && rmsr == 1 && rnsr == 0 && rfsr == 0)
  {
    delay(checktime);
    calculateposition();
    if(lfsr == 1 && lnsr == 1 && lmsr == 1 && rmsr == 1 && rnsr == 0 && rfsr == 0)
    {
      delay(150);
      calculateposition();
      if (lfsr == 0 && lnsr == 0 && lmsr == 0 && rmsr == 0 && rnsr == 0 && rfsr == 0)
      {
        stopp();
        defaultstraight();
        delay(150);
        leftturn();
        path[pathcounter++] = 'L';
      }
      else
      {
        stopp();
        defaultstraight();
        delay(150);
        path[pathcounter++] = 'S';
      }
    }

  }
  else if (lfsr == 1 && lnsr == 1 && lmsr == 1 && rmsr == 0 && rnsr == 0 && rfsr == 0)
  {
    delay(checktime);
    calculateposition();
    if(lfsr == 1 && lnsr == 1 && lmsr == 1 && rmsr == 0 && rnsr == 0 && rfsr == 0)
    {
      delay(100);
      calculateposition();
      if (lfsr == 0 && lnsr == 0 && lmsr == 0 && rmsr == 0 && rnsr == 0 && rfsr == 0)
      {
        stopp();
        defaultstraight();
        delay(150);
        leftturn();
        path[pathcounter++] = 'L';
      }
      else
      {
        stopp();
        defaultstraight();
        delay(150);
        path[pathcounter++] = 'S';
      }
    }

  }
  else if (lfsr == 0 && lnsr == 0 && lmsr == 0 && rmsr == 0 && rnsr == 0 && rfsr == 0)
  {
    delay(checktime);
    calculateposition();
    if (lfsr == 0 && lnsr == 0 && lmsr == 0 && rmsr == 0 && rnsr == 0 && rfsr == 0)
    {
      stopp();
      defaultstraight();
      delay(150);
      back();
      path[pathcounter++] = 'B';
    }
  }
  else if (lfsr == 1 && lnsr == 1 && lmsr == 1 && rmsr == 1 && rnsr == 1 && rfsr == 1)
  {
    delay(110);
    calculateposition();
    if (lfsr == 1 && lnsr == 1 && lmsr == 1 && rmsr == 1 && rnsr == 1 && rfsr == 1)
    {
      stopp();
      steady();
      path[pathcounter++] = 'D';
      shortpath();
      digitalWrite(12, HIGH);
      delay(6000);
      digitalWrite(12, LOW);
      followpath();
      

    }
    else
    {
      stopp();
      defaultstraight();
      delay(270);
      rightturn();
      path[pathcounter++] = 'R';
    }
  }
}
char shorting(char s[])
{
  char arr[9][3] = {"LBR", "RBL", "SBL", "LBL", "RBR", "SBR", "LBS", "RBS", "SBS"};
  char result[9] = {'B', 'B', 'R', 'S', 'S', 'L', 'R', 'L', 'B'};
  char ss[4];
  for (int i = 0; i < 9; i++)
  {
    ss[0] = arr[i][0];
    ss[1] = arr[i][1];
    ss[2] = arr[i][2];
    ss[3] = '\0';
    if (strcmp(s, ss) == 0)
    {
      return result[i];
    }
  }
}
void rearrange(char arr[], char sh, int i, int n)
{
  arr[i] = sh;
  int j;
  for (j = i + 1; j < n; j++)
  {
    if (j + 2 >= n)
      break;
    arr[j] = arr[j + 2];
  }
}
int arrangesort(char arr[], int* n)
{
  int check = 0;
  int i;
  for (i = 0; i < *n; i++)
  {
    if (arr[i] == 'B' && (i - 1) > -1 && (i + 1) < *n)
    {
      check = 1;
      char y[4] = {arr[i - 1], arr[i], arr[i + 1], '\0'};
      char sh = shorting(y);
      rearrange(arr, sh, i - 1, *n);
      *n = *n - 2;
    }
  }
  if (check == 1)
  {
    return 0;
  }
  else
    return 1;
}
void shortpath()
{
  int n = pathcounter;
  int k = 0;
  while (k == 0)
  {
    k = arrangesort(path, &n);
  }
}
void followpath()
{
  spd = 110;
  stoppdelay = 140;
  positionn = 4;
  pathcounter = 0;
  int mn = 0;
  while (mn == 0) //infinite
  {

    calculateposition();
    if (positionn == 1 || positionn == 2 || positionn == 3 || positionn == 4 || positionn == 5 || positionn == 6 || positionn == 7)
    {
      straight();
    }
    else
    {
      calculateposition();
      if (lfsr == 0 && lnsr == 0 && lmsr == 1 && rmsr == 1 && rnsr == 1 && rfsr == 1)
      {
        delay(checktime);
        calculateposition();
        if (lfsr == 0 && lnsr == 0 && lmsr == 1 && rmsr == 1 && rnsr == 1 && rfsr == 1)
        {
          if (path[pathcounter] == 'S')
          {
            defaultstraight();
            delay(200);
          }
          else if (path[pathcounter] == 'L')
          {
            stopp();
            defaultstraight();
            delay(300);
            leftturn();
          }
          else if (path[pathcounter] == 'R')
          {
            stopp();
            defaultstraight();
            delay(300);
            rightturn();
          }
          else if (path[pathcounter] == 'D')
          {
            fullstop();
          }
          else if (path[pathcounter] == 'B')
          {
            stopp();
            defaultstraight();
            delay(300);
            back();
          }
          pathcounter++;
        }
      }
      else if (lfsr == 1 && lnsr == 1 && lmsr == 1 && rmsr == 1 && rnsr == 0 && rfsr == 0)
      {
        delay(checktime);
        calculateposition();
        if (lfsr == 0 && lnsr == 0 && lmsr == 0 && rmsr == 0 && rnsr == 0 && rfsr == 0)
        {
          if (path[pathcounter] == 'S')
          {
            defaultstraight();
            delay(200);
          }
          else if (path[pathcounter] == 'L')
          {
            stopp();
            defaultstraight();
            delay(300);
            leftturn();
          }
          else if (path[pathcounter] == 'R')
          {
            stopp();
            defaultstraight();
            delay(300);
            rightturn();
          }
          else if (path[pathcounter] == 'D')
          {
            fullstop();
          }
          else if (path[pathcounter] == 'B')
          {
            stopp();
            defaultstraight();
            delay(300);
            back();
          }
          pathcounter++;
        }
        else
        {
          if (path[pathcounter] == 'S')
          {
            defaultstraight();
            delay(200);
          }
          else if (path[pathcounter] == 'L')
          {
            stopp();
            defaultstraight();
            delay(300);
            leftturn();
          }
          else if (path[pathcounter] == 'R')
          {
            stopp();
            defaultstraight();
            delay(300);
            rightturn();
          }
          else if (path[pathcounter] == 'D')
          {
            fullstop();
          }
          else if (path[pathcounter] == 'B')
          {
            stopp();
            defaultstraight();
            delay(300);
            back();
          }
          pathcounter++;
        }
      }
      else if (lfsr == 0 && lnsr == 0 && lmsr == 0 && rmsr == 0 && rnsr == 0 && rfsr == 0)
      {
        delay(checktime);
        calculateposition();
        if (lfsr == 0 && lnsr == 0 && lmsr == 0 && rmsr == 0 && rnsr == 0 && rfsr == 0)
        {
          if (path[pathcounter] == 'S')
          {
            defaultstraight();
            delay(200);
          }
          else if (path[pathcounter] == 'L')
          {
            stopp();
            defaultstraight();
            delay(300);
            leftturn();
          }
          else if (path[pathcounter] == 'R')
          {
            stopp();
            defaultstraight();
            delay(300);
            rightturn();
          }
          else if (path[pathcounter] == 'D')
          {
            fullstop();
          }
          else if (path[pathcounter] == 'B')
          {
            stopp();
            defaultstraight();
            delay(300);
            back();
          }
          pathcounter++;
        }
      }
      else if (lfsr == 1 && lnsr == 1 && lmsr == 1 && rmsr == 1 && rnsr == 1 && rfsr == 1)
      {
        delay(checktime);
        calculateposition();
        if ((lfsr == 0 && lnsr == 0 && lmsr == 0 && rmsr == 0 && rnsr == 0 && rfsr == 0) || (positionn == 3 || positionn == 4 || positionn == 5))
        {
          if (path[pathcounter] == 'S')
          {
            defaultstraight();
            delay(200);
          }
          else if (path[pathcounter] == 'L')
          {
            stopp();
            defaultstraight();
            delay(300);
            leftturn();
          }
          else if (path[pathcounter] == 'R')
          {
            stopp();
            defaultstraight();
            delay(300);
            rightturn();
          }
          else if (path[pathcounter] == 'D')
          {
            fullstop();
          }
          else if (path[pathcounter] == 'B')
          {
            stopp();
            defaultstraight();
            delay(300);
            back();
          }
          pathcounter++;

        }
        else if (lfsr == 1 && lnsr == 1 && lmsr == 1 && rmsr == 1 && rnsr == 1 && rfsr == 1)
        {
          if (path[pathcounter] == 'S')
          {
            defaultstraight();
            delay(200);
          }
          else if (path[pathcounter] == 'L')
          {
            stopp();
            defaultstraight();
            delay(300);
            leftturn();
          }
          else if (path[pathcounter] == 'R')
          {
            stopp();
            defaultstraight();
            delay(300);
            rightturn();
          }
          else if (path[pathcounter] == 'D')
          {
            fullstop();
          }
          else if (path[pathcounter] == 'B')
          {
            stopp();
            defaultstraight();
            delay(300);
            back();
          }
          pathcounter++;
        }
      }
    }
    positionn = -1;
  }
}
void calculateposition()
{
  readsensors();
  if (lfsr == 0 && lnsr == 0 && lmsr == 1 && rmsr == 1 && rnsr == 0 && rfsr == 0)
    positionn = 4;
  else if (lfsr == 0 && lnsr == 1 && lmsr == 1 && rmsr == 0 && rnsr == 0 && rfsr == 0)
    positionn = 3;
  else if (lfsr == 1 && lnsr == 1 && lmsr == 0 && rmsr == 0 && rnsr == 0 && rfsr == 0)
    positionn = 2;
  else if (lfsr == 1 && lnsr == 0 && lmsr == 0 && rmsr == 0 && rnsr == 0 && rfsr == 0)
    positionn = 1;
  else if (lfsr == 0 && lnsr == 0 && lmsr == 0 && rmsr == 1 && rnsr == 1 && rfsr == 0)
    positionn = 5;
  else if (lfsr == 0 && lnsr == 0 && lmsr == 0 && rmsr == 0 && rnsr == 1 && rfsr == 1)
    positionn = 6;
  else if (lfsr == 0 && lnsr == 0 && lmsr == 0 && rmsr == 0 && rnsr == 0 && rfsr == 1)
    positionn = 7;
  error = setpoint - positionn;
  /*Serial.print("Postion = ");
    Serial.print(positionn);*/
}
void printvalues()
{
  Serial.print(lfsr);
  Serial.print("  ");
  Serial.print(lnsr);
  Serial.print("  ");
  Serial.print(lmsr);
  Serial.print("  ");
  Serial.print(rmsr);
  Serial.print("  ");
  Serial.print(rnsr);
  Serial.print("  ");
  Serial.print(rfsr);
  Serial.print("  ");
  Serial.print("  ");
  Serial.print("  ");
  lfsr = analogRead(leftFS);
   
  lnsr = analogRead(leftNS);
  
  lmsr = analogRead(leftMS);
  
  rmsr = analogRead(rightMS);
  
  rnsr = analogRead(rightNS);
  
  rfsr = analogRead(rightFS);
  Serial.print(lfsr);
  Serial.print("  ");
  Serial.print(lnsr);
  Serial.print("  ");
  Serial.print(lmsr);
  Serial.print("  ");
  Serial.print(rmsr);
  Serial.print("  ");
  Serial.print(rnsr);
  Serial.print("  ");
  Serial.print(rfsr);
  Serial.println();
  
}
void readsensors()
{
  lfsr = analogRead(leftFS);
  if (lfsr > 870)
    lfsr = 0;
  else
    lfsr = 1;
  lnsr = analogRead(leftNS);
  if (lnsr > 870)
    lnsr = 0;
  else
    lnsr = 1;
  lmsr = analogRead(leftMS);
  if (lmsr > 870)
    lmsr = 0;
  else
    lmsr = 1;
  rmsr = analogRead(rightMS);
  if (rmsr > 870)
    rmsr = 0;
  else
    rmsr = 1;
  rnsr = analogRead(rightNS);
  if (rnsr > 870)
    rnsr = 0;
  else
    rnsr = 1;
  rfsr = analogRead(rightFS);
  if (rfsr > 870)
    rfsr = 0;
  else
    rfsr = 1;
}
void straight()
{
  PID();
  ENAS = spd - control;
  ENBS = spd + control;
  if ((ENAS > 255))
    ENAS = 255;
  else if (ENAS < 0)
    ENAS = 0;
  if ((ENBS > 255))
    ENBS = 255;
  else if (ENBS < 0)
    ENBS = 0;


  analogWrite(ENA, ENAS);
  analogWrite(ENB, ENBS);
  digitalWrite(LMP, HIGH);
  digitalWrite(LMN, LOW);
  digitalWrite(RMP, HIGH);
  digitalWrite(RMN, LOW);
}
void stopp()
{
  analogWrite(ENA, spd);
  analogWrite(ENB, spd);
  digitalWrite(LMP, LOW);
  digitalWrite(LMN, HIGH);
  digitalWrite(RMP, LOW);
  digitalWrite(RMN, HIGH);
  delay(stoppdelay);
}
void leftturn()
{

  analogWrite(ENA, 47);
  analogWrite(ENB, 47);
  digitalWrite(LMP, LOW);
  digitalWrite(LMN, HIGH);
  digitalWrite(RMP, HIGH);
  digitalWrite(RMN, LOW);
  delay(100);
  int lt=0;
  while(lt==0)
  {
    calculateposition();
    if(lfsr == 1)
    lt=1;
  }

}
void rightturn()
{
  analogWrite(ENA, 47);
  analogWrite(ENB, 47);
  digitalWrite(LMP, HIGH);
  digitalWrite(LMN, LOW);
  digitalWrite(RMP, LOW);
  digitalWrite(RMN, HIGH);
  delay(100);
  int rt=0;
  while(rt==0)
  {
    calculateposition();
    if(rfsr == 1)
    rt=1;
  }
}
void steady()
{
  digitalWrite(LMP, LOW);
  digitalWrite(LMN, LOW);
  digitalWrite(RMP, LOW);
  digitalWrite(RMN, LOW);
}
void defaultstraight()
{
  analogWrite(ENA, spd);
  analogWrite(ENB, spd);
  digitalWrite(LMP, HIGH);
  digitalWrite(LMN, LOW);
  digitalWrite(RMP, HIGH);
  digitalWrite(RMN, LOW);
}
void back()
{

  analogWrite(ENA, 47);
  analogWrite(ENB, 47);
  digitalWrite(LMP, LOW);
  digitalWrite(LMN, HIGH);
  digitalWrite(RMP, HIGH);
  digitalWrite(RMN, LOW);
  int bk=0;
  delay(300);
  while(bk==0)
  {
    calculateposition();
    if(lmsr == 1)
    bk=1;
  }

}
void fullstop()
{
  stoppdelay = 80;
  stopp();
  steady();
  digitalWrite(12, HIGH);
  delay(20000);
}